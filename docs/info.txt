# Important: All videos must have the same size and codecs (audio / video) before join.

1. Re-encode the videos

ffmpeg -i .\intro.mp4 -acodec aac -vcodec libx264 -s 1920x1080 -r 60 -strict experimental .\intro_enc.mp4

--> -vcodec: qtlre (allow transparency)
--> ffmpeg -i .\clip1.mp4 -acodec aac -vcodec qtrle -s 1280x720 -r 30 -b:v 64k -minrate 64k -maxrate 64k -bufsize 64k -strict experimental .\clip1.mov
--> -s: 1280x720
--> -r: 24, 30...

2. Create a silent track and concatenate the videos using that dummy audio track.

ffmpeg -i .\intro_enc.mp4 -i .\cam1_enc.mp4 -f lavfi -t 0.1 -i anullsrc -filter_complex "[0:v:0][2:a][1:v:0][2:a] concat=n=2:v=1:a=1 [v][a]" -map "[v]" -map "[a]" out.mp4


## Create the installer with PyInstaller

pyinstaller --add-data "input;input" --add-data "tools;tools" .\VideoJoiner.py
or
pyinstaller .\VideoJoiner.spec

Optional params:
-> -F: Create an standalone executable
-> --noconsole: Don't show the terminal when the application is running
-> --icon=favicon.ico: Set the applciation icon on title bar

## OVERLAY (in progress)
ffmpeg -i .\intro.mov -i .\clip1.mov -filter_complex "[1:v]setpts=PTS+3/TB[a]; [0:v][a]overlay=enable=gte(t\,3):shortest=0[out]" -map [out] -c:v libx264 -crf 18 -pix_fmt yuv420p output.mov

ffmpeg -i .\intro.mov -i .\clip1.mov -filter_complex "[0:v]setpts=PTS+3/TB[a]; [1:v][a]overlay=enable=gte(t\,3):shortest=0" -map [out] -c:v libx264 -crf 18 -pix_fmt yuv420p output.mov

[0:v][a]overlay=enable=gte(t\,3):shortest=0[out]; [1:v]setpts=PTS+3/TB[a]


ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "[0:v]setpts=PTS+3/TB[clipd]; [1:v][clipd]overlay=w" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mov

# Overlay the intro over the clip (OK)
ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "overlay=0:0" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mov

# Delay the clip 3 sec (frezee the clip for 3 sec, then start intro and clip)
ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "[0:v]setpts=PTS+3/TB[delay]; [delay][1:v]overlay=0:0" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mov

# Start the intro video 3 sec before the clip (OK)
ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "[1:v]setpts=PTS-3/TB[delay]; [0:v][delay]overlay=0:0" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mov

# Scale intro from 1080 to clip size -> 720 (OK)
ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "[1:v]setpts=PTS-3/TB[delay]; [1:v]scale2ref[1:v][0:v]; [0:v][delay]overlay=0:0" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mp4


# Scale intro without delay
ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "[1:v][0:v]scale2ref=iw:ih[intro][clip]; [clip][intro]overlay=0:0" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mp4

# Sound delayed (conversion don't finish, but the output works)
ffmpeg -i .\clip1.mov -i .\intro.mov -filter_complex "[1:v][0:v]scale2ref=iw:ih[intro][clip], [clip]setpts=PTS+3/TB, fps=30[delayed], [0:a]adelay=3000|3000, apad[clipa]; [delayed][intro]overlay=0:0[out]" -map [out] -map [clipa] -c:v libx264 -crf 18 -pix_fmt yuv420p output.mp4

# Join 3 videos
ffmpeg -i .\clip1.mov -i .\intro.mov -i .\outro.mov -filter_complex "[1:v]setpts=PTS-3/TB[delay]; [1:v]scale2ref[1:v][0:v]; [0:v][delay]overlay=0:0[over]; [2:v]setpts=PTS+16/TB[outdelay]; [over][outdelay]overlay=0:0" -c:v qtrle -crf 18 output.mov

ffmpeg -i .\clip1.mov -i .\intro.mov -i .\outro.mov -filter_complex "[1:v]setpts=PTS-3/TB[delay]; [1:v]scale2ref[1:v][0:v]; [0:v][delay]overlay=0:0[over]; [2:v]setpts=PTS+19/TB[outdelay]; [over][outdelay]overlay=0:0" -c:v libx264 -crf 18 -pix_fmt yuv420p output.mp4